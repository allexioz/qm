# Badminon Queueing App - Cursor Rules

## Project Summary
Badminon Queueing App enables a badminton queue master to manage players and courts efficiently, ensuring every player receives adequate court time.

## Technical Requirements
- **Languages & Technologies:** Vanilla JavaScript, HTML5, CSS3, PWA
- **Icons:** Fontawesome
- **Storage:** Browser’s native local storage API for state persistence

## Design Guidelines
- **Apple Principles:** Follow Apple Design Principles, Human Interface Guidelines (https://developer.apple.com/design/human-interface-guidelines), and Decision-Making Process.
- **Visual Enhancements:** Use strategic emojis; maintain proper spacing, padding, and visual hierarchy through size, color, and other visual cues.
- **Consistency:** Reference existing application design to ensure seamless integration.

## Logging & Debugging
- **Logging:** Use a dedicated logger for all logging needs.
- **Debugging:** Add debug prints when necessary and remove them once issues are resolved.

## Development Process
- **Test-Driven Approach:**  
  - Write tests first and execute them in the designated virtual environment (venv).  
  - Run tests continuously to verify functionality.
- **Iteration:** Write code and iterate until the implementation meets all requirements.

## Code Quality & Clean Code Principles
- **Readability:** Write clean, readable, and maintainable code.
- **Modularity:** Keep functions small, focused, and use explicit, descriptive variable names.
- **Documentation:** Include meaningful comments and documentation where needed.
- **Constants:** Replace hardcoded values with named constants to avoid magic numbers.
- **Error Handling:** Implement robust error handling, logging, and use assertions to validate assumptions.

## Refactoring Guidelines
- **DRY Principle:** Avoid duplicating code and ensure clarity throughout.
- **File-by-File Edits:** Make changes one file at a time and provide edits in a single chunk.
- **Preservation:** Maintain existing structures and unrelated code.

## Async & Memory Management
- **Async Usage:** Use async functions unless a function is simple enough to remain synchronous.
- **Memory Updates:** Update the `.cursormemory.md` file with project specifications, code flow, requirements, and development instructions (including GraphQL mutations and queries).

## Planning & Integration
- **Pre-Implementation Planning:**  
  - Analyze how new code integrates with the existing codebase.  
  - Consider error handling, edge cases, performance, and security.
- **Design for Use:** Ensure new code serves both frontend needs and developer usability.
- **Modularity & Compatibility:**  
  - Follow a modular design for maintainability and reusability.  
  - Verify compatibility with specified language and framework versions.

## Best Practices & Developer Guidelines
1. **Verify Information:** Always verify before presenting; avoid assumptions or speculation.
2. **File-by-File Changes:** Edit files individually; provide all changes in one consolidated chunk.
3. **No Apologies:** Do not include apologies in code or documentation.
4. **No Understanding Feedback:** Avoid comments suggesting “understanding” of code.
5. **No Whitespace Suggestions:** Do not propose whitespace modifications.
6. **No Summaries:** Refrain from summarizing changes.
7. **No Inventions:** Implement only the changes explicitly requested.
8. **No Unnecessary Confirmations:** Avoid confirming information already provided.
9. **Preserve Existing Code:** Do not remove unrelated code or functionalities.
10. **Single Chunk Edits:** Provide all modifications in one complete chunk.
11. **No Implementation Checks:** Do not ask to verify implementations visible in the provided context.
12. **No Unnecessary Updates:** Only suggest modifications where changes are required.
13. **Provide Real File Links:** Always link to real files, not context-generated versions.
14. **No Current Implementation Exposure:** Do not display current implementations unless specifically requested.
15. **Context Verification:** Check context-generated file content before making edits.
16. **Explicit Naming:** Use descriptive and explicit variable names.
17. **Consistent Style:** Adhere to the project’s existing coding style.
18. **Prioritize Performance:** Consider and prioritize performance in all code suggestions.
19. **Security-First:** Always incorporate security best practices.
20. **Test Coverage:** Include appropriate unit tests for new or modified code.
21. **Error Handling:** Ensure robust error handling and logging.
22. **Modular Design:** Follow modular design principles for enhanced maintainability.
23. **Version Compatibility:** Ensure modifications are compatible with specified versions.
24. **Avoid Magic Numbers:** Replace hardcoded values with named constants.
25. **Consider Edge Cases:** Always account for potential edge cases.
26. **Use Assertions:** Integrate assertions to catch potential errors early.
27. **Apple Guidelines:** Consistently apply Apple Design Principles, Human Interface Guidelines, and Decision-Making Process.
